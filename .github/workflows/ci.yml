# .github/workflows/ci.yml

# Continuous Integration (CI) Workflow
name: ci

# This workflow will run whenever we push commits to the `main` branch, or
# whenever there's a pull request to the `main` branch. See:
# https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#on
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  lint:
    # Give your job a name that will show up in the GitHub Actions web UI
    name: ESLint
    # We'll run this on a Linux (Ubuntu) VM, since we'll deploy on Linux too.
    runs-on: ubuntu-latest
    # We run these steps one after the other, and if any fail, we stop the process
    steps:
      # https://github.com/actions/checkout
      - name: Check out code
        uses: actions/checkout@v4

      # https://github.com/actions/setup-node
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          # Use node LTS https://github.com/actions/setup-node#supported-version-syntax
          node-version: 'lts/*'
          # Cache npm dependencies so they don't have to be downloaded next time - https://github.com/actions/setup-node#caching-packages-dependencies
          cache: 'npm'

      - name: Install node dependencies
        # Use `ci` vs. `install`, see https://docs.npmjs.com/cli/v8/commands/npm-ci
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  # adding dockerfile-lint job to lint Dockerfile
  # uses hadolint to ensure best practices
  dockerfile-lint:
    name: Dockerfile Lint
    runs-on: ubuntu-latest
    steps:
      # the checkout step essentially downloads or "checks out" the latest version
      # of your code from the GitHub repository into the working directory of
      # the CI job
      # https://github.com/marketplace/actions/checkout @v4 uses latest patch version
      - uses: actions/checkout@v4
      # https://github.com/marketplace/actions/hadolint-action to find the github action
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      # the checkout step essentially downloads or "checks out" the latest version
      # of your code from the GitHub repository into the working directory of
      # the CI job
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install node dependencies and run Tests
        # There are two ways we could do this:
        #
        # 1. Call `npm ci` followed by `npm test` like so (NOTE: the use of | and -):
        # run: |
        # - npm install
        # - npm test
        #
        # 2. Use `install-ci-test` to do it in a single command, see https://docs.npmjs.com/cli/v8/commands/npm-install-ci-test
        # run: npm install-ci-test
        run: npm install-ci-test

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
      - name: Install node dependencies
        # NOTE: we need to install dev dependencies too vs. production only for hurl
        run: npm install
      - name: Build Containers
        run: docker compose up -d
      - name: Setup Local AWS Resources
        # NOTE: this file needs to be made executable *before* you check into git:
        # $ chmod +x ./scripts/local-aws-setup.sh
        run: ./scripts/local-aws-setup.sh
      - name: Run Hurl Tests
        run: npm run test:integration

  # docker-hub job will depend on the other 4 jobs succeeding BELOW
  # (linting, dockerfile linting, unit-tests, and integration tests)
  # We do that by adding a "needs" property to our job
  docker-hub:
    name: Build and Push to DockerHub
    needs: [lint, dockerfile-lint, unit-tests, integration-tests]
    runs-on: ubuntu-latest
    steps:
      # Set up buildx for optimal Docker Builds, see:
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to Docker Hub using GitHub secrets, see:
      # https://github.com/docker/login-action
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # to build and push Docker Image to Docker Hub
      # define multiple tags for this image:
      # 1. one, will indicate the git commit SHA that we are building
      # 2. two, will indicate the current commit on the main branch
      # 3. three, will indicate that this is the latest image built for this repo
      # Build and Push an Image to Docker Hub
      - name: Build and Push
        env:
          # Define an Environment Variable with our Docker Hub Repo
          DOCKERHUB_REPO: bagglebob/fragments
          # Define an Environment Variable with the current git commit's
          SHA_TAG: sha-${{ github.sha }}
        # uses use Docker's build-push action
        # https://github.com/docker/build-push-action
        uses: docker/build-push-action@v6
        with:
          push: true
          # tag 1 -> bagglebob/fragments:sha-7d821bd14e0d6c381dc57a5369ae1a3a9220664f
          # tag 2 -> bagglebob/fragments:main
          # tag 3 -> bagglebob/fragments:latest
          tags: ${{ env.DOCKERHUB_REPO }}:${{ env.SHA_TAG }}, ${{ env.DOCKERHUB_REPO }}:main, ${{ env.DOCKERHUB_REPO }}:latest
