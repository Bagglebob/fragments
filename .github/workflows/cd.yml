# This file will run whenever we push a new git tag
# To create a new tag, we also need to update the package.json version:
# $ npm version 0.5.0 will update `version` in package.json to `0.5.0` and create a new tag, `v0.5.0` in git.
# We'll then use this tag (i.e., `v0.5.0`) to tag our docker image before we push to AWS.

name: cd

on:
  push:
    # Whenever a new tag is pushed
    tags:
      # Any tag starting with v... should trigger this workflow.
      - 'v**'

jobs:
  # NOTE: this assumes our CI jobs have already passed previously
  # (i.e., that we don't tag a commit manually until we know a build is working)
  aws:
    name: AWS
    runs-on: ubuntu-latest
    steps:
      # first step is to checkout code from git, to build a new Docker image from it
      - name: Check out code
        uses: actions/checkout@v4

      # Use buildx, which is faster and can optimize the build steps
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # NOTE: ending and restarting the Learner Lab will void these secrets,
      # update them if you are doing this during a new session:
      - name: Configure AWS Credentials using Secrets
        # https://github.com/aws-actions/configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Use our GitHub Encrypted Secrets via secrets.*
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          # Hard-code our region, which isn't a secret, and won't change
          aws-region: us-east-1

      # Login to our ECR repository using the configured credentials
      # sets an output variable called registry, which contains the ECR registry URL (e.g., 123456789012.dkr.ecr.us-east-1.amazonaws.com).
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build and Push an Image to Amazon ECR
      - name: Build and push to Amazon ECR
        env:
          # {steps.login-ecr.outputs.registry} is grabbing the registry output
          # from the login-ecr step and storing it in an environment variable
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          # Define an Environment Variable with our ECR Repository Name
          ECR_REPO: fragments
          # TAGGING
          # We'll give this image two different tags
          # First is the git tag so we can go back and recreate this step
          VERSION_TAG: ${{ github.ref_name }}
        uses: docker/build-push-action@v6
        with:
          push: true
          # Second, we'll replace the `latest` tag, since this is our most up-to-date version
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ env.VERSION_TAG }}, ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:latest

      # We need to update our fragment's Task Definition JSON
      # (i.e., fragments-definition.json) to use the newly
      # updated Docker Image to use (i.e., the tag we just pushed to ECR).
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: update-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO: fragments
          VERSION_TAG: ${{ github.ref_name }}
        with:
          task-definition: fragments-definition.json
          container-name: fragments-container
          # Use the image we just built and pushed to ECR for this tag
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ env.VERSION_TAG }}
          # Necessary ENV variables,
          # use GitHub Secrets for values that are secrets/sensitive
          environment-variables: |
            LOG_LEVEL=info
            NODE_ENV=production
            PORT=80
            AWS_COGNITO_POOL_ID=us-east-1_o2iCAizYv
            AWS_COGNITO_CLIENT_ID=3i5hpbdavqgd8qscglas0p756n
            AWS_REGION=us-east-1
            API_URL=https://fragments.farshad2.mystudentproject.ca/
            AWS_S3_BUCKET_NAME=farshad2-fragments
      # Step to deploy ECS task definition
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.update-task-def.outputs.task-definition }}
          cluster: fragments-cluster
          service: fragments-service
          # Requests GitHub Actions to wait until deployment is "stable" before finishing
          wait-for-service-stability: true
